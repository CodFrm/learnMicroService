// Code generated by protoc-gen-go. DO NOT EDIT.
// source: learnMicroService.proto

package lms

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TokenMsg struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Api                  string   `protobuf:"bytes,2,opt,name=api,proto3" json:"api,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenMsg) Reset()         { *m = TokenMsg{} }
func (m *TokenMsg) String() string { return proto.CompactTextString(m) }
func (*TokenMsg) ProtoMessage()    {}
func (*TokenMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_43520427f71b4305, []int{0}
}

func (m *TokenMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenMsg.Unmarshal(m, b)
}
func (m *TokenMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenMsg.Marshal(b, m, deterministic)
}
func (m *TokenMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenMsg.Merge(m, src)
}
func (m *TokenMsg) XXX_Size() int {
	return xxx_messageInfo_TokenMsg.Size(m)
}
func (m *TokenMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TokenMsg proto.InternalMessageInfo

func (m *TokenMsg) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TokenMsg) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

type UserMsg struct {
	Uid                  int32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Access               bool     `protobuf:"varint,2,opt,name=access,proto3" json:"access,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Group                string   `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserMsg) Reset()         { *m = UserMsg{} }
func (m *UserMsg) String() string { return proto.CompactTextString(m) }
func (*UserMsg) ProtoMessage()    {}
func (*UserMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_43520427f71b4305, []int{1}
}

func (m *UserMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserMsg.Unmarshal(m, b)
}
func (m *UserMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserMsg.Marshal(b, m, deterministic)
}
func (m *UserMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserMsg.Merge(m, src)
}
func (m *UserMsg) XXX_Size() int {
	return xxx_messageInfo_UserMsg.Size(m)
}
func (m *UserMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_UserMsg.DiscardUnknown(m)
}

var xxx_messageInfo_UserMsg proto.InternalMessageInfo

func (m *UserMsg) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserMsg) GetAccess() bool {
	if m != nil {
		return m.Access
	}
	return false
}

func (m *UserMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserMsg) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func init() {
	proto.RegisterType((*TokenMsg)(nil), "lms.TokenMsg")
	proto.RegisterType((*UserMsg)(nil), "lms.UserMsg")
}

func init() { proto.RegisterFile("learnMicroService.proto", fileDescriptor_43520427f71b4305) }

var fileDescriptor_43520427f71b4305 = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x8f, 0xcd, 0x4e, 0x84, 0x30,
	0x14, 0x85, 0xc5, 0xf2, 0xe7, 0x8d, 0x26, 0xe4, 0xc6, 0x68, 0xe3, 0xca, 0xb0, 0x62, 0x45, 0x0c,
	0x3e, 0x81, 0x0f, 0xc0, 0x06, 0x75, 0x39, 0x8b, 0x4e, 0x69, 0x98, 0x66, 0x0a, 0x25, 0x2d, 0xf0,
	0xfc, 0x93, 0x5e, 0x98, 0xdd, 0xf7, 0x35, 0x39, 0x3d, 0xe7, 0xc2, 0xbb, 0x51, 0xc2, 0x4d, 0xad,
	0x96, 0xce, 0xfe, 0x2a, 0xb7, 0x69, 0xa9, 0xea, 0xd9, 0xd9, 0xc5, 0x22, 0x33, 0xa3, 0x2f, 0x1b,
	0xc8, 0xff, 0xec, 0x55, 0x4d, 0xad, 0x1f, 0xf0, 0x15, 0x92, 0x25, 0x30, 0x8f, 0x3e, 0xa3, 0xea,
	0xa9, 0xdb, 0x05, 0x0b, 0x60, 0x62, 0xd6, 0xfc, 0x91, 0xde, 0x02, 0x96, 0x27, 0xc8, 0xfe, 0xbd,
	0x72, 0x21, 0x52, 0x00, 0x5b, 0x75, 0x4f, 0x81, 0xa4, 0x0b, 0x88, 0x6f, 0x90, 0x0a, 0x29, 0x95,
	0xf7, 0x94, 0xc8, 0xbb, 0xc3, 0x10, 0x21, 0x9e, 0xc4, 0xa8, 0x38, 0xa3, 0x7f, 0x88, 0x43, 0xe1,
	0xe0, 0xec, 0x3a, 0xf3, 0x78, 0x2f, 0x24, 0x69, 0xbe, 0x20, 0xfe, 0x59, 0x97, 0x0b, 0x56, 0x90,
	0x69, 0xbf, 0x09, 0xa3, 0x7b, 0x7c, 0xa9, 0xcd, 0xe8, 0xeb, 0xfb, 0xd0, 0x8f, 0x67, 0xd2, 0x63,
	0x43, 0xf9, 0x70, 0x4e, 0xe9, 0xa0, 0xef, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x38, 0xfe,
	0x66, 0xeb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthClient interface {
	Isvalid(ctx context.Context, in *TokenMsg, opts ...grpc.CallOption) (*UserMsg, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Isvalid(ctx context.Context, in *TokenMsg, opts ...grpc.CallOption) (*UserMsg, error) {
	out := new(UserMsg)
	err := c.cc.Invoke(ctx, "/lms.Auth/isvalid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
type AuthServer interface {
	Isvalid(context.Context, *TokenMsg) (*UserMsg, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_Isvalid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Isvalid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lms.Auth/Isvalid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Isvalid(ctx, req.(*TokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lms.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "isvalid",
			Handler:    _Auth_Isvalid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "learnMicroService.proto",
}
